#!/usr/bin/env python3
"""
Script para automatizar cria√ß√£o de issues no GitHub usando SSH
Baseado no cronograma das Sprints 1 e 2 do projeto ABP
"""

import subprocess
import json
import os

# Configura√ß√µes do GitHub
REPO_OWNER = 'seu-usuario'  # Substitua pelo seu usu√°rio
REPO_NAME = 'ABP'  # Substitua pelo nome do reposit√≥rio

def create_issue_ssh(title, body, labels, assignees=None):
    """Cria uma issue no GitHub usando SSH"""
    
    # Preparar dados da issue
    issue_data = {
        'title': title,
        'body': body,
        'labels': labels
    }
    
    if assignees:
        issue_data['assignees'] = assignees
    
    # Criar comando gh CLI
    cmd = ['gh', 'issue', 'create']
    cmd.extend(['--title', title])
    cmd.extend(['--body', body])
    
    for label in labels:
        cmd.extend(['--label', label])
    
    if assignees:
        for assignee in assignees:
            cmd.extend(['--assignee', assignee])
    
    try:
        # Executar comando
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print(f"‚úÖ Issue criada: {title}")
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar issue '{title}': {e}")
        print(f"Erro: {e.stderr}")
        return None

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando cria√ß√£o autom√°tica de issues do GitHub via SSH...")
    print("=" * 60)
    
    # Verificar se gh CLI est√° instalado
    try:
        subprocess.run(['gh', '--version'], capture_output=True, check=True)
        print("‚úÖ GitHub CLI encontrado")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå GitHub CLI n√£o encontrado!")
        print("Instale: https://cli.github.com/")
        return
    
    # Verificar autentica√ß√£o SSH
    try:
        subprocess.run(['gh', 'auth', 'status'], capture_output=True, check=True)
        print("‚úÖ Autentica√ß√£o SSH configurada")
    except subprocess.CalledProcessError:
        print("‚ùå N√£o autenticado!")
        print("Execute: gh auth login")
        return
    
    print(f"üìÅ Reposit√≥rio: {REPO_OWNER}/{REPO_NAME}")
    print("=" * 60)
    
    # Criar issues da Sprint 1
    print("\nüìã SPRINT 1 - FUNDA√á√ÉO SEGURA")
    
    issues_sprint1 = [
        {
            'title': 'SD-001: Configurar HTTPS/TLS',
            'body': '''## üîí Configura√ß√£o HTTPS/TLS

**Descri√ß√£o:** Implementar comunica√ß√£o segura HTTPS/TLS para a aplica√ß√£o

**Crit√©rios de Aceita√ß√£o:**
- [ ] Certificado SSL configurado para API
- [ ] HTTPS habilitado no servidor
- [ ] URLs do Flutter atualizadas para HTTPS
- [ ] Comunica√ß√£o segura testada e funcionando
- [ ] Redirecionamento HTTP ‚Üí HTTPS implementado

**Prioridade:** üî• CR√çTICA
**Respons√°vel:** Isaac, Renan
**Data:** 22/09/2025''',
            'labels': ['SD', 'Backend', 'Seguran√ßa', 'cr√≠tica'],
            'assignees': ['Isaac', 'Renan']
        },
        {
            'title': 'LD-001: Desenvolver logotipo representativo',
            'body': '''## üé® Desenvolvimento de Logotipo

**Descri√ß√£o:** Criar um logotipo representativo e original para o projeto WorcaFlow

**Crit√©rios de Aceita√ß√£o:**
- [ ] Logotipo criado e aprovado pela equipe
- [ ] Vers√µes em diferentes formatos (PNG, SVG)
- [ ] Integra√ß√£o no aplicativo Flutter
- [ ] Documenta√ß√£o do processo de cria√ß√£o

**Prioridade:** ‚ö†Ô∏è ALTA
**Respons√°vel:** Felipe, Marcelly, Ana
**Data:** 22/09/2025''',
            'labels': ['LD', 'Frontend', 'Design', 'alta'],
            'assignees': ['Felipe', 'Marcelly', 'Ana']
        }
    ]
    
    for issue in issues_sprint1:
        create_issue_ssh(
            title=issue['title'],
            body=issue['body'],
            labels=issue['labels'],
            assignees=issue['assignees']
        )
    
    print("\n‚úÖ Processo conclu√≠do!")
    print("üìù Verifique as issues criadas no GitHub")

if __name__ == "__main__":
    main()
